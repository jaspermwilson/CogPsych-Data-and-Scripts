merged_file$PrimeRecalled = NA
merged_file$PrimeRecalledCondition = NA
# also adding info about whether the word was studied, a prime or random
## primes can be "identical", "related" or "unrelated"
## how do we know which of these it is?
## we need a way of tracking the "related" primes -- i.e., if a "related" prime showed up, then
## then we need to find the word it was the prime for
fullwordlist = read.csv("fullwordlist_old.csv", header = TRUE, sep = ",")
## indices of rows in fullwordlist where the RelatedPrime is in the mergedfile list
fullwordindices = which(fullwordlist$Prime %in%  merged_file$Prime )
## we extract the "target" and "prime" for these indices
target_indices = fullwordlist[fullwordindices, c("Target", "Prime")]
## we merge this with the merged_file
colnames(target_indices) = c("PrimeFor", "Prime")
merged_file = left_join(merged_file, target_indices)
prime_list = merged_file$Prime
primefor_list = merged_file$PrimeFor
## now we know which word it was the prime for when the prime was related
## next we want to know if the word recalled by participant was random, a prime, or studied
merged_file$PrimeRecalledCondition = NA
for(i in 1:nrow(merged_file)){
if(as.character(merged_file[i,7]) %in% prime_list){
## if recalledword is in the prime list
## then RecalledPrime contains the Prime Condition
## first we find the position of the match
position = which(prime_list %in% merged_file[i,7])
merged_file[i,16] = merged_file[position,9]
merged_file[i,17] = merged_file[position,10]
}
}
write.csv(merged_file, file = "AB_final.csv", row.names = FALSE)
## primed recall experiment: summer 2020 scripts
studied_words = read.csv("test_studiedwords.csv", header = TRUE, sep = ",")
subjectfile = read.csv("test_initial.csv", header = TRUE, sep = ",")
library(dplyr)
merged_file = left_join(subjectfile, studied_words, by = c("RecalledWord", "Block"))
merged_file$Studied = ifelse(is.na(merged_file$StudyPosition), NA, "Studied")
merged_file$PrimeRecalled = NA
merged_file$PrimeRecalledCondition = NA
# also adding info about whether the word was studied, a prime or random
## primes can be "identical", "related" or "unrelated"
## how do we know which of these it is?
## we need a way of tracking the "related" primes -- i.e., if a "related" prime showed up, then
## then we need to find the word it was the prime for
fullwordlist = read.csv("fullwordlist_old.csv", header = TRUE, sep = ",")
## indices of rows in fullwordlist where the RelatedPrime is in the mergedfile list
fullwordindices = which(fullwordlist$Prime %in%  merged_file$Prime )
## we extract the "target" and "prime" for these indices
target_indices = fullwordlist[fullwordindices, c("Target", "Prime")]
## we merge this with the merged_file
colnames(target_indices) = c("PrimeFor", "Prime")
merged_file = left_join(merged_file, target_indices)
prime_list = merged_file$Prime
primefor_list = merged_file$PrimeFor
## now we know which word it was the prime for when the prime was related
## next we want to know if the word recalled by participant was random, a prime, or studied
merged_file$PrimeRecalledCondition = NA
for(i in 1:nrow(merged_file)){
if(as.character(merged_file[i,7]) %in% prime_list){
## if recalledword is in the prime list
## then RecalledPrime contains the Prime Condition
## first we find the position of the match
position = which(prime_list %in% merged_file[i,7])
merged_file[i,16] = merged_file[position,9]
merged_file[i,17] = merged_file[position,10]
}
}
write.csv(merged_file, file = "test_final.csv", row.names = FALSE)
## primed recall experiment: summer 2020 scripts
studied_words = read.csv("test_studiedwords.csv", header = TRUE, sep = ",")
subjectfile = read.csv("test_initial.csv", header = TRUE, sep = ",")
library(dplyr)
merged_file = left_join(subjectfile, studied_words, by = c("RecalledWord", "Block"))
merged_file$Studied = ifelse(is.na(merged_file$StudyPosition), NA, "Studied")
merged_file$PrimeRecalledCondition = NA
# also adding info about whether the word was studied, a prime or random
## primes can be "identical", "related" or "unrelated"
## how do we know which of these it is?
## we need a way of tracking the "related" primes -- i.e., if a "related" prime showed up, then
## then we need to find the word it was the prime for
fullwordlist = read.csv("fullwordlist_old.csv", header = TRUE, sep = ",")
## indices of rows in fullwordlist where the RelatedPrime is in the mergedfile list
fullwordindices = which(fullwordlist$Prime %in%  merged_file$Prime )
## we extract the "target" and "prime" for these indices
target_indices = fullwordlist[fullwordindices, c("Target", "Prime")]
## we merge this with the merged_file
colnames(target_indices) = c("PrimeFor", "Prime")
merged_file = left_join(merged_file, target_indices)
prime_list = merged_file$Prime
primefor_list = merged_file$PrimeFor
## now we know which word it was the prime for when the prime was related
## next we want to know if the word recalled by participant was random, a prime, or studied
merged_file$PrimeRecalledCondition = NA
for(i in 1:nrow(merged_file)){
if(as.character(merged_file[i,7]) %in% prime_list){
## if recalledword is in the prime list
## then RecalledPrime contains the Prime Condition
## first we find the position of the match
position = which(prime_list %in% merged_file[i,7])
merged_file[i,17] = merged_file[position,10]
}
}
write.csv(merged_file, file = "test_final.csv", row.names = FALSE)
## primed recall experiment: summer 2020 scripts
studied_words = read.csv("test_studiedwords.csv", header = TRUE, sep = ",")
subjectfile = read.csv("test_initial.csv", header = TRUE, sep = ",")
library(dplyr)
merged_file = left_join(subjectfile, studied_words, by = c("RecalledWord", "Block"))
merged_file$Studied = ifelse(is.na(merged_file$StudyPosition), NA, "Studied")
merged_file$PrimeRecalledCondition = NA
# also adding info about whether the word was studied, a prime or random
## primes can be "identical", "related" or "unrelated"
## how do we know which of these it is?
## we need a way of tracking the "related" primes -- i.e., if a "related" prime showed up, then
## then we need to find the word it was the prime for
fullwordlist = read.csv("fullwordlist_old.csv", header = TRUE, sep = ",")
## indices of rows in fullwordlist where the RelatedPrime is in the mergedfile list
fullwordindices = which(fullwordlist$Prime %in%  merged_file$Prime )
## we extract the "target" and "prime" for these indices
target_indices = fullwordlist[fullwordindices, c("Target", "Prime")]
## we merge this with the merged_file
colnames(target_indices) = c("PrimeFor", "Prime")
merged_file = left_join(merged_file, target_indices)
prime_list = merged_file$Prime
primefor_list = merged_file$PrimeFor
## now we know which word it was the prime for when the prime was related
## next we want to know if the word recalled by participant was random, a prime, or studied
merged_file$PrimeRecalledCondition = NA
for(i in 1:nrow(merged_file)){
if(as.character(merged_file[i,7]) %in% prime_list){
## if recalledword is in the prime list
## then RecalledPrime contains the Prime Condition
## first we find the position of the match
position = which(prime_list %in% merged_file[i,7])
merged_file[i,16] = merged_file[position,10]
}
}
write.csv(merged_file, file = "test_final.csv", row.names = FALSE)
## primed recall experiment: summer 2020 scripts
studied_words = read.csv("CW_studiedwords.csv", header = TRUE, sep = ",")
subjectfile = read.csv("CW_initial.csv", header = TRUE, sep = ",")
library(dplyr)
merged_file = left_join(subjectfile, studied_words, by = c("RecalledWord", "Block"))
merged_file$Studied = ifelse(is.na(merged_file$StudyPosition), NA, "Studied")
merged_file$PrimeRecalledCondition = NA
# also adding info about whether the word was studied, a prime or random
## primes can be "identical", "related" or "unrelated"
## how do we know which of these it is?
## we need a way of tracking the "related" primes -- i.e., if a "related" prime showed up, then
## then we need to find the word it was the prime for
fullwordlist = read.csv("fullwordlist_old.csv", header = TRUE, sep = ",")
## indices of rows in fullwordlist where the RelatedPrime is in the mergedfile list
fullwordindices = which(fullwordlist$Prime %in%  merged_file$Prime )
## we extract the "target" and "prime" for these indices
target_indices = fullwordlist[fullwordindices, c("Target", "Prime")]
## we merge this with the merged_file
colnames(target_indices) = c("PrimeFor", "Prime")
merged_file = left_join(merged_file, target_indices)
prime_list = merged_file$Prime
primefor_list = merged_file$PrimeFor
## now we know which word it was the prime for when the prime was related
## next we want to know if the word recalled by participant was random, a prime, or studied
merged_file$PrimeRecalledCondition = NA
for(i in 1:nrow(merged_file)){
if(as.character(merged_file[i,7]) %in% prime_list){
## if recalledword is in the prime list
## then RecalledPrime contains the Prime Condition
## first we find the position of the match
position = which(prime_list %in% merged_file[i,7])
merged_file[i,16] = merged_file[position,10]
}
if(as.character(merged_file[i,9])=="firstword"){
merged_file[i,10]="firstword"
} else if(as.character(merged_file[i,9]) %in% studied_words$RecalledWord){
merged_file[i,10]="Identical"
} else if(as.character(merged_file[i,9]) %in% fullwordlist$Prime){
merged_file[i,10]="Related"
} else{
merged_file[i,10]="Unrelated"
}
}
write.csv(merged_file, file = "CW_final.csv", row.names = FALSE)
## primed recall experiment: summer 2020 scripts
studied_words = read.csv("CW_studiedwords.csv", header = TRUE, sep = ",")
subjectfile = read.csv("CW_initial.csv", header = TRUE, sep = ",")
library(dplyr)
merged_file = left_join(subjectfile, studied_words, by = c("RecalledWord", "Block"))
merged_file$Studied = ifelse(is.na(merged_file$StudyPosition), NA, "Studied")
merged_file$PrimeRecalled = NA
merged_file$PrimeRecalledCondition = NA
# also adding info about whether the word was studied, a prime or random
## primes can be "identical", "related" or "unrelated"
## how do we know which of these it is?
## we need a way of tracking the "related" primes -- i.e., if a "related" prime showed up, then
## then we need to find the word it was the prime for
fullwordlist = read.csv("fullwordlist_old.csv", header = TRUE, sep = ",")
## indices of rows in fullwordlist where the RelatedPrime is in the mergedfile list
fullwordindices = which(fullwordlist$Prime %in%  merged_file$Prime )
## we extract the "target" and "prime" for these indices
target_indices = fullwordlist[fullwordindices, c("Target", "Prime")]
## we merge this with the merged_file
colnames(target_indices) = c("PrimeFor", "Prime")
merged_file = left_join(merged_file, target_indices)
prime_list = merged_file$Prime
primefor_list = merged_file$PrimeFor
## now we know which word it was the prime for when the prime was related
## next we want to know if the word recalled by participant was random, a prime, or studied
merged_file$PrimeRecalledCondition = NA
for(i in 1:nrow(merged_file)){
if(as.character(merged_file[i,7]) %in% prime_list){
## if recalledword is in the prime list
## then RecalledPrime contains the Prime Condition
## first we find the position of the match
position = which(prime_list %in% merged_file[i,7])
merged_file[i,17] = merged_file[position,10]
}
if(as.character(merged_file[i,9])=="firstword"){
merged_file[i,10]="firstword"
} else if(as.character(merged_file[i,9]) %in% studied_words$RecalledWord){
merged_file[i,10]="Identical"
} else if(as.character(merged_file[i,9]) %in% fullwordlist$Prime){
merged_file[i,10]="Related"
} else{
merged_file[i,10]="Unrelated"
}
}
write.csv(merged_file, file = "CW_final.csv", row.names = FALSE)
## primed recall experiment: summer 2020 scripts
studied_words = read.csv("CW_studiedwords.csv", header = TRUE, sep = ",")
subjectfile = read.csv("CW_initial.csv", header = TRUE, sep = ",")
library(dplyr)
merged_file = left_join(subjectfile, studied_words, by = c("RecalledWord", "Block"))
merged_file$Studied = ifelse(is.na(merged_file$StudyPosition), NA, "Studied")
merged_file$PrimeRecalledCondition = NA
# also adding info about whether the word was studied, a prime or random
## primes can be "identical", "related" or "unrelated"
## how do we know which of these it is?
## we need a way of tracking the "related" primes -- i.e., if a "related" prime showed up, then
## then we need to find the word it was the prime for
fullwordlist = read.csv("fullwordlist_old.csv", header = TRUE, sep = ",")
## indices of rows in fullwordlist where the RelatedPrime is in the mergedfile list
fullwordindices = which(fullwordlist$Prime %in%  merged_file$Prime )
## we extract the "target" and "prime" for these indices
target_indices = fullwordlist[fullwordindices, c("Target", "Prime")]
## we merge this with the merged_file
colnames(target_indices) = c("PrimeFor", "Prime")
merged_file = left_join(merged_file, target_indices)
prime_list = merged_file$Prime
primefor_list = merged_file$PrimeFor
## now we know which word it was the prime for when the prime was related
## next we want to know if the word recalled by participant was random, a prime, or studied
merged_file$PrimeRecalledCondition = NA
for(i in 1:nrow(merged_file)){
if(as.character(merged_file[i,7]) %in% prime_list){
## if recalledword is in the prime list
## then RecalledPrime contains the Prime Condition
## first we find the position of the match
position = which(prime_list %in% merged_file[i,7])
merged_file[i,16] = merged_file[position,10]
}
if(as.character(merged_file[i,9])=="firstword"){
merged_file[i,10]="firstword"
} else if(as.character(merged_file[i,9]) %in% studied_words$RecalledWord){
merged_file[i,10]="Identical"
} else if(as.character(merged_file[i,9]) %in% fullwordlist$Prime){
merged_file[i,10]="Related"
} else{
merged_file[i,10]="Unrelated"
}
}
write.csv(merged_file, file = "CW_final.csv", row.names = FALSE)
## primed recall experiment: summer 2020 scripts
studied_words = read.csv("CW_studiedwords.csv", header = TRUE, sep = ",")
subjectfile = read.csv("CW_initial.csv", header = TRUE, sep = ",")
library(dplyr)
merged_file = left_join(subjectfile, studied_words, by = c("RecalledWord", "Block"))
merged_file$Studied = ifelse(is.na(merged_file$StudyPosition), NA, "Studied")
merged_file$PrimeRecalledCondition = NA
# also adding info about whether the word was studied, a prime or random
## primes can be "identical", "related" or "unrelated"
## how do we know which of these it is?
## we need a way of tracking the "related" primes -- i.e., if a "related" prime showed up, then
## then we need to find the word it was the prime for
fullwordlist = read.csv("fullwordlist_old.csv", header = TRUE, sep = ",")
## indices of rows in fullwordlist where the RelatedPrime is in the mergedfile list
fullwordindices = which(fullwordlist$Prime %in%  merged_file$Prime )
## we extract the "target" and "prime" for these indices
target_indices = fullwordlist[fullwordindices, c("Target", "Prime")]
## we merge this with the merged_file
colnames(target_indices) = c("PrimeFor", "Prime")
merged_file = left_join(merged_file, target_indices)
prime_list = merged_file$Prime
primefor_list = merged_file$PrimeFor
## now we know which word it was the prime for when the prime was related
## next we want to know if the word recalled by participant was random, a prime, or studied
merged_file$PrimeRecalledCondition = NA
for(i in 1:nrow(merged_file)){
if(as.character(merged_file[i,7]) %in% prime_list){
## if recalledword is in the prime list
## then RecalledPrime contains the Prime Condition
## first we find the position of the match
position = which(prime_list %in% merged_file[i,7])
merged_file[i,16] = merged_file[position,10]
}
if(as.character(merged_file[i,9])=="firstword"){
merged_file[i,10]="firstword"
} else if(as.character(merged_file[i,9]) %in% studied_words$RecalledWord){
merged_file[i,10]="Identical"
} else if(as.character(merged_file[i,9]) %in% fullwordlist$Prime){
merged_file[i,10]="Related"
} else{
merged_file[i,10]="Unrelated"
}
}
write.csv(merged_file, file = "CW_final.csv", row.names = FALSE)
studied_words = read.csv("CW_studiedwords.csv", header = TRUE, sep = ",")
subjectfile = read.csv("CW_final.csv", header = TRUE, sep = ",")
delayedfile = read.csv("CW_delayedrecall.csv", header = TRUE, sep = ",")
library(dplyr)
# omit all XXXXX
delayedfile_subset = delayedfile
delayedfile_subset$Studied = NA
delayedfile_subset$StudyPosition = NA
delayedfile_subset$Block = NA
delayedfile_subset$PrimeCondition = NA
delayedfile_subset$Day1OutputPosition = NA
delayedfile_subset$PrimedRelated = NA
for (i in 1:nrow(delayedfile_subset)){
## if the delayed recalled word is in the studied_words
## then "Studied" is true, and we get position and block
if(as.character(delayedfile_subset[i,1]) %in% studied_words$RecalledWord){
delayedfile_subset[i,3] = "Studied"
position = which(studied_words$RecalledWord %in% delayedfile_subset[i,1])
delayedfile_subset[i,4] = studied_words[position,2]
delayedfile_subset[i,5] = studied_words[position,3]
}
## if the delayed recalled word is in the prime list
## then PrimeRecalled contains the condition of that prime
## this will tell us if the participant reported any of the primes they saw on day 1
## identical/unrelated/related
if(as.character(delayedfile_subset[i,1]) %in% subjectfile$Prime){
primeposition = which(subjectfile$Prime %in% delayedfile_subset[i,1])
delayedfile_subset[i,6] = (subjectfile[primeposition, 10])
}
## now we want to check if this delayed recalled word was recalled on day 1
## if so, we want to know the output position in which it was recalled
if(as.character(delayedfile_subset[i,1]) %in% subjectfile$RecalledWord){
wordposition = which(subjectfile$RecalledWord %in% delayedfile_subset[i,1])
delayedfile_subset[i,7] = paste( unlist(subjectfile[c(wordposition),12]), collapse=',')
}
## finally, we can also check if any of the delayed recalled words
## had been "primed" by a related prime, i.e., maybe the word
## recalled was studied AND semntically primed
## if so, we store its related prime
## and change prime condition to "Related"
if(as.character(delayedfile_subset[i,1]) %in% subjectfile$PrimeFor){
primeforposition = which(subjectfile$PrimeFor %in% delayedfile_subset[i,1])
delayedfile_subset[i,8] =  subjectfile[primeforposition, 9]
delayedfile_subset[i,6] = "Related"
}
}
# merge this file with the full file
## if there are XXXXXs in the delayed file use this:
delayedfile_final = left_join(delayedfile, delayedfile_subset)
## if there are no XXXXXs in the delayed file use this:
#delayedfile_final = delayedfile_subset
write.csv(delayedfile_final, file = "CW_delayed_final.csv", row.names = FALSE )
studied_words = read.csv("CW_studiedwords.csv", header = TRUE, sep = ",")
subjectfile = read.csv("CW_final.csv", header = TRUE, sep = ",")
recogfile = read.csv("CW_recog.csv", header = TRUE, sep = ",")
delayedfile = read.csv("CW_delayed_final.csv", header = TRUE, sep = ",")
recogfile$Studied = NA
recogfile$StudyPosition = NA
recogfile$Block = NA
recogfile$PrimeCondition = NA
recogfile$RelatedPrime = NA
recogfile$Day1Position = NA
recogfile$Day2Position = NA
for (i in 1:nrow(recogfile)){
## if the recogword is in the studied_words list
## then Studied is True and we record the study and block position
if(as.character(recogfile[i,1]) %in% studied_words$RecalledWord){
recogfile[i,10] = "Studied"
position = which(studied_words$RecalledWord %in% recogfile[i,1])
recogfile[i,11] = studied_words[position,2]
recogfile[i,12] = studied_words[position,3]
}
## if recogword is a prime (Unrelated or Identity)
## then we record the prime condition
if(as.character(recogfile[i,1]) %in% subjectfile$Prime){
primeposition = which(subjectfile$Prime %in% recogfile[i,1])
recogfile[i,13] = subjectfile[primeposition,10]
}
## it is also possible that the recogword is studied and RELATED primed
## if so, we change PrimeCondition to Related
## and store the RelatedPrime
if(as.character(recogfile[i,1]) %in% subjectfile$PrimeFor){
primeforposition = which(subjectfile$PrimeFor %in% recogfile[i,1])
recogfile[i,13] = "Related"
recogfile[i,14] = subjectfile[primeforposition,9]
}
## also want to know if the recogword was recalled on day1/day2
## and at which position
## if recalled on day1, we store its output position from day 1
## if it is recalled more than once, we store all the positions
if(as.character(recogfile[i,1]) %in% subjectfile$RecalledWord){
day1position = which(subjectfile$RecalledWord %in% recogfile[i,1])
recogfile[i,15] = paste( unlist(subjectfile[c(day1position),12]), collapse=',')
}
## if recalled on day2, we store its output position from day 2
if(as.character(recogfile[i,1]) %in% delayedfile$DelayedWord){
day2position = which(delayedfile$DelayedWord %in% recogfile[i,1])
recogfile[i,16] = paste(unlist(day2position), collapse = ",")
}
}
write.csv(recogfile, file = "CW_recog_final.csv", row.names = FALSE )
## primed recall experiment: summer 2020 scripts
studied_words = read.csv("AB_studiedwords.csv", header = TRUE, sep = ",")
subjectfile = read.csv("AB_initial.csv", header = TRUE, sep = ",")
library(dplyr)
merged_file = left_join(subjectfile, studied_words, by = c("RecalledWord", "Block"))
merged_file$Studied = ifelse(is.na(merged_file$StudyPosition), NA, "Studied")
merged_file$PrimeRecalledCondition = NA
# also adding info about whether the word was studied, a prime or random
## primes can be "identical", "related" or "unrelated"
## how do we know which of these it is?
## we need a way of tracking the "related" primes -- i.e., if a "related" prime showed up, then
## then we need to find the word it was the prime for
fullwordlist = read.csv("fullwordlist_old.csv", header = TRUE, sep = ",")
## indices of rows in fullwordlist where the RelatedPrime is in the mergedfile list
fullwordindices = which(fullwordlist$Prime %in%  merged_file$Prime )
## we extract the "target" and "prime" for these indices
target_indices = fullwordlist[fullwordindices, c("Target", "Prime")]
## we merge this with the merged_file
colnames(target_indices) = c("PrimeFor", "Prime")
merged_file = left_join(merged_file, target_indices)
prime_list = merged_file$Prime
primefor_list = merged_file$PrimeFor
## now we know which word it was the prime for when the prime was related
## next we want to know if the word recalled by participant was random, a prime, or studied
merged_file$PrimeRecalledCondition = NA
for(i in 1:nrow(merged_file)){
if(as.character(merged_file[i,7]) %in% prime_list){
## if recalledword is in the prime list
## then RecalledPrime contains the Prime Condition
## first we find the position of the match
position = which(prime_list %in% merged_file[i,7])
merged_file[i,16] = merged_file[position,10]
}
if(as.character(merged_file[i,9])=="firstword"){
merged_file[i,10]="firstword"
} else if(as.character(merged_file[i,9]) %in% studied_words$RecalledWord){
merged_file[i,10]="Identical"
} else if(as.character(merged_file[i,9]) %in% fullwordlist$Prime){
merged_file[i,10]="Related"
} else{
merged_file[i,10]="Unrelated"
}
}
write.csv(merged_file, file = "AB_final.csv", row.names = FALSE)
studied_words = read.csv("AB_studiedwords.csv", header = TRUE, sep = ",")
subjectfile = read.csv("AB_final.csv", header = TRUE, sep = ",")
delayedfile = read.csv("AB_delayedrecall.csv", header = TRUE, sep = ",")
library(dplyr)
# omit all XXXXX
delayedfile_subset = delayedfile
delayedfile_subset$Studied = NA
delayedfile_subset$StudyPosition = NA
delayedfile_subset$Block = NA
delayedfile_subset$PrimeCondition = NA
delayedfile_subset$Day1OutputPosition = NA
delayedfile_subset$PrimedRelated = NA
for (i in 1:nrow(delayedfile_subset)){
## if the delayed recalled word is in the studied_words
## then "Studied" is true, and we get position and block
if(as.character(delayedfile_subset[i,1]) %in% studied_words$RecalledWord){
delayedfile_subset[i,3] = "Studied"
position = which(studied_words$RecalledWord %in% delayedfile_subset[i,1])
delayedfile_subset[i,4] = studied_words[position,2]
delayedfile_subset[i,5] = studied_words[position,3]
}
## if the delayed recalled word is in the prime list
## then PrimeRecalled contains the condition of that prime
## this will tell us if the participant reported any of the primes they saw on day 1
## identical/unrelated/related
if(as.character(delayedfile_subset[i,1]) %in% subjectfile$Prime){
primeposition = which(subjectfile$Prime %in% delayedfile_subset[i,1])
delayedfile_subset[i,6] = (subjectfile[primeposition, 10])
}
## now we want to check if this delayed recalled word was recalled on day 1
## if so, we want to know the output position in which it was recalled
if(as.character(delayedfile_subset[i,1]) %in% subjectfile$RecalledWord){
wordposition = which(subjectfile$RecalledWord %in% delayedfile_subset[i,1])
delayedfile_subset[i,7] = paste( unlist(subjectfile[c(wordposition),12]), collapse=',')
}
## finally, we can also check if any of the delayed recalled words
## had been "primed" by a related prime, i.e., maybe the word
## recalled was studied AND semntically primed
## if so, we store its related prime
## and change prime condition to "Related"
if(as.character(delayedfile_subset[i,1]) %in% subjectfile$PrimeFor){
primeforposition = which(subjectfile$PrimeFor %in% delayedfile_subset[i,1])
delayedfile_subset[i,8] =  subjectfile[primeforposition, 9]
delayedfile_subset[i,6] = "Related"
}
}
# merge this file with the full file
## if there are XXXXXs in the delayed file use this:
delayedfile_final = left_join(delayedfile, delayedfile_subset)
## if there are no XXXXXs in the delayed file use this:
#delayedfile_final = delayedfile_subset
write.csv(delayedfile_final, file = "AB_delayed_final.csv", row.names = FALSE )
